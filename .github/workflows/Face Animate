local function alignWraps()
	local selectionService = game:GetService("Selection")
	local selectedObjects = selectionService:Get()
	local alignObjects = {}
	for _, obj in selectedObjects do
		if obj:IsA("BaseWrap") then
			--print("Wrap: " .. obj.Name)
			table.insert(alignObjects, obj)
		else
			print("Ignore: " .. obj.Name)
		end
	end

	if #alignObjects < 2 then
		warn("You need to select at least two wraps")
		return
	end

	local anchorWrap = alignObjects[1]
	local worldA_from_Wrap = anchorWrap.ImportOriginWorld
	print("Anchor: " .. anchorWrap.Name)
	for i = 2, #alignObjects do
		local wrapToAlign = alignObjects[i]
		print("Align: " .. wrapToAlign.Name)
		local wrap_from_WorldB = wrapToAlign.ImportOriginWorld:Inverse()
		local worldA_from_WorldB = worldA_from_Wrap * wrap_from_WorldB
		local worldB = wrapToAlign.Parent.CFrame
		-- Note: adjust CFrame of the parent part
		wrapToAlign.Parent.CFrame = (worldB_from_WorldB * worldB)
	end
end
local camera = workspace.CurrentCamera
camera.CameraType = Enum.CameraType.Scriptable

local pos = Vector3.new(0, 10, 0)
local lookAtPos = Vector3.new(10, 0, 0)

workspace.CurrentCamera.CFrame = CFrame.lookAt(pos, lookAtPos)
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

local camera = workspace.CurrentCamera
camera.CameraType = Enum.CameraType.Scriptable

local player = Players.LocalPlayer
local character = player.Character
if not character or character.Parent == nil then
	character = player.CharacterAdded:Wait()
end

local pos = camera.CFrame * Vector3.new(0, 20, 0)
local lookAtPos = character.PrimaryPart.Position
local targetCFrame = CFrame.lookAt(pos, lookAtPos)

local tween = TweenService:Create(camera, TweenInfo.new(2), {CFrame = targetCFrame})

tween:Play()
local Players = game:GetService("Players")

local localPlayer = Players.LocalPlayer

local function resetCameraSubject()
	if workspace.CurrentCamera and localPlayer.Character then
		local humanoid = localPlayer.Character:FindFirstChildWhichIsA("Humanoid")
		if humanoid then
			workspace.CurrentCamera.CameraSubject = humanoid
		end
	end
end
local UserInputService = game:GetService("UserInputService")

local camera = workspace.CurrentCamera

local headCFrame = UserInputService:GetUserCFrame(Enum.UserCFrame.Head)
headCFrame = headCFrame.Rotation + headCFrame.Position * camera.HeadScale

-- This will be equivalent to Camera:GetRenderCFrame()
local renderCFrame = camera.CFrame * headCFrame
